name: ci
on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/devops-demo
      IMAGE_TAG: ${{ github.sha }}-${{ github.run_number }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECS_CLUSTER: devops-demo-cluster
      ECS_SERVICE: devops-demo-svc
      ECS_TASK_FAMILY: devops-demo
      ECS_CONTAINER_NAME: devops-demo

    steps:
      - uses: actions/checkout@7208146c9ce4749b4ff44ff8030d953a578fa209
      - uses: docker/setup-buildx-action@7208146c9ce4749b4ff44ff8030d953a578fa209

      - name: Build and push Docker image
        uses: docker/build-push-action@7208146c9ce4749b4ff44ff8030d953a578fa209
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            docker.io/nickkap/devops-demo:${{ github.sha }}
            docker.io/nickkap/devops-demo:latest

      - name: Setup Node (for minified-body check)
        uses: actions/setup-node@7208146c9ce4749b4ff44ff8030d953a578fa209
        with:
          node-version: '18'

      - name: Run container
        run: |
          docker run -d --rm -p 80:80 --name devops-demo-test devops-demo:test
          sleep 2
          curl -s http://localhost/ > /tmp/body.json
          diff -u /tmp/body.json <(jq -cj . /tmp/body.json)
          node -e 'const fs=require("fs");const b=fs.readFileSync("/tmp/body.json","utf8");const s=JSON.stringify(JSON.parse(b)); if(b!==s) process.exit(1)'
          curl -sI http://localhost/ | grep -i '^content-type:'

      - name: Verify with apprentice-action
        uses: liatrio/github-actions/apprentice-action@7208146c9ce4749b4ff44ff8030d953a578fa209
        continue-on-error: true

      - name: Log in and push (only if above succeeded)
        if: success()
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push image
        if: success()
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          build-args: |
            GIT_SHA=${{ github.sha }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-demo:${{ github.sha }}-${{ github.run_number }}
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-demo:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@7208146c9ce4749b4ff44ff8030d953a578fa209
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        
      - name: Render task definition (use SHA tag)
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@cbed19f1b86bbb18f59cfffde7107b93cc9b75da
        with:
          task-definition: aws/ecs-taskdef.json
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: docker.io/nickkap/devops-demo:${{ github.sha }}

      - name: Assert rendered task image matches SHA
        run: |
          IMG=$(jq -r '.containerDefinitions[0].image' "${{ steps.render.outputs.task-definition }}")
          EXPECT="docker.io/nickkap/devops-demo:${{ github.sha }}"
          echo "Rendered image: $IMG"
          echo "Expected image: $EXPECT"
          test "$IMG" = "$EXPECT"

      - name: Deploy to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@894716a47351b1f52a6a1d140fd53fdb046ec619
        with:
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_SERVICE }}
          task-definition: ${{ steps.render.outputs.task-definition }}
          wait-for-service-stability: true